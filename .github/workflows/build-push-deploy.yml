name: build-push-deploy

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Node + pnpm with caching for quicker installs
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build web app
        run: pnpm run build

      # Build a tiny static image that only serves ./dist, running as non-root
      - name: Prepare Dockerfile
        run: |
          cat > Dockerfile <<'EOF'
          FROM nginx:alpine
          # Install envsubst (from gettext) to substitute runtime env vars
          RUN apk add --no-cache gettext

          # Static files built by Vite (including public/runtime-config.json)
          COPY dist /usr/share/nginx/html

          # Add a minimal entrypoint to substitute env vars at container start
          COPY docker-entrypoint.sh /docker-entrypoint.sh
          RUN chmod +x /docker-entrypoint.sh

          EXPOSE 80
          CMD ["/docker-entrypoint.sh"]
          EOF

          cat > docker-entrypoint.sh <<'EOF'
          #!/bin/sh
          set -eu

          HTML_DIR=/usr/share/nginx/html

          # If runtime-config.json exists, substitute $VARS into it in-place
          if [ -f "$HTML_DIR/runtime-config.json" ]; then
            envsubst < "$HTML_DIR/runtime-config.json" > "$HTML_DIR/runtime-config.json.tmp" && mv "$HTML_DIR/runtime-config.json.tmp" "$HTML_DIR/runtime-config.json"
          fi

          # Start nginx in foreground
          exec nginx -g 'daemon off;'
          EOF

      - name: Log in to ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make GHCR package public
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          owner="${{ github.repository_owner }}"
          repo="${{ github.event.repository.name }}"
          owner_type=$(gh api /users/$owner --jq .type)
          if [ "$owner_type" = "Organization" ]; then
            path="/orgs/$owner/packages/container/$repo/visibility"
          else
            path="/users/$owner/packages/container/$repo/visibility"
          fi
          gh api -X PUT "$path" -f visibility=public

      - name: Deploy via Coolify webhook
        run: |
          curl -fsSL -X GET "${{ secrets.COOLIFY_WEBHOOK }}" \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"

      - name: Convex deploy (run last)
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: pnpm dlx convex deploy --yes
